server:
  port: 8080
endpoints:
  shutdown:
    enabled: true
    sensitive: false
management:
  security:
    enabled: false
spring:
  datasource:
    url: jdbc:mysql://rm-uf659fc1pyp136g328o.mysql.rds.aliyuncs.com:3306/zx-bt?useSSL=false&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
    username: root
    password: Lzb112358*
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # DataSource配置
    druid:
      # 初始容量
      initial-size: 20
      # 最大连接池个数
      max-active: 100
      # 最小空闲
      min-idle: 10
      # 获取连接最大等待时间
      max-wait: 3000
      # 是否缓存preparedStatement(PSCache),对游标提升巨大,建议oracle开启,mysql关闭
      pool-prepared-statements: false
      # 启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: 0
      # 检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: select 'x'
      # 检测连接是否有效的超时时间。秒,底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validation-query-timeout: 30
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 驱逐策略间隔,如果连接空闲时间大于minEvictableIdleTimeMillis,则关闭
      time-between-eviction-runs-millis: 60000
      # 在池中的最小生存时间
      min-evictable-idle-time-millis: 30000
      # 在池中的最大生存时间
      max-evictable-idle-time-millis: 600000
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      keep-alive: true
      # 连接初始化时,执行的sql
      connection-init-sqls:
      # 开启的过滤器,常用的有  监控统计:stat  日志:log4j 防御sql注入:wall
      filters: stat,wall,log4j
      # 合并多个dataSource的监控记录
      use-global-data-source-stat: true

      # 监控配置
      # 是否启用stat-filter默认值true
      web-stat-filter.enabled: true
      # 匹配的uri
      web-stat-filter.url-pattern: /*
      # 忽略的uri *.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
      web-stat-filter.exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 是否启用session统计
      web-stat-filter.session-stat-enable: true
      web-stat-filter.session-stat-max-count: 1000
      web-stat-filter.principal-session-name: zx
      web-stat-filter.principal-cookie-name: zx
      # 监控单个url调用的sql列表。
      web-stat-filter.profile-enable: true
      # StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      #是否启用监控界面默认值true
      stat-view-servlet.enabled: true
      # web.xml的url-pattern,也就是访问/druid/*访问到该servlet
      stat-view-servlet.url-pattern: /druid/*
      #  允许清空统计数据
      stat-view-servlet.reset-enable: true
      # 用户名
      stat-view-servlet.login-username: zx
      # 密码
      stat-view-servlet.login-password: 123456
      # ip白名单
      stat-view-servlet.allow:
      # ip黑名单
      stat-view-servlet.deny:
      # 过滤器配置
      filter:
        stat:
          # 聚合sql 开启慢sql查询
          merge-sql: true
          # 是否开启慢sql查询
          log-slow-sql: true
          # 超过多少时间为慢sql 开启慢sql查询
          slow-sql-millis: 500
          # 是否启用
          enabled: true
        # 安全配置,防止sql注入. 具体参数可查看文档,包括禁止各类增删查改的操作
#        wall:
#          config:
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    hibernate:
      ddl-auto: none
    show-sql: false
security:
  basic:
    enabled: false
zx-bt:
  http:
    # 获取连接请求超时时间
    connection-request-timeout: 2000
    # 连接超时时间
    connection-timeout: 3000
    # 最大连接数
    max-connection-num: 10
    # 握手超时时间
    socket-timeout: 3000


  performance:
    # find_node任务,线程数
    find-node-task-thread-num: 2
    # find_node任务, 发送间隔. 毫秒
    find-node-task-interval-ms: 0
    # UDP服务器主任务线程数,单个端口的数量
    udp-server-main-thread-num: 1

    # fetchMetadataByPeerTask,最大线程数
    fetch-metadata-by-peer-task-tread-num: 3
    # fetchMetadataByPeerTask,连接成功后等待peer超时时间
    fetch-metadata-by-peer-task-read-timeout-second: 10

    # fetchMetadataByOtherWebTask,等待尝试获取队列最大长度
    fetch-metadata-by-other-web-task-queue-num: 10240
    # fetchMetadataByOtherWebTask,线程数
    fetch-metadata-by-other-web-task-thread-num: 5

    # get_peers任务,最多同时进行的任务数
    get-peers-task-concurrent-num: 100
    # get_peers任务, info_hash等待队列长度
    get-peers-task-info-hash-queue-len: 10240
    # get_peers任务过期时间
    get-peers-task-expire-second: 200
    # get_peers请求, 最小发送间隔
    get-peers-request-send-interval-ms: 0
    # get_peers任务, 任务满载后,暂停开启新任务时间
    get-peers-task-pause-second: 10
    # get_peers任务, 开启新任务最大间隔
    get-peers-task-create-interval-ms: 1000

    # infoHash布隆过滤器 预期最大数量
    info-hash-filter-max-num: 99999999
    #  infoHash布隆过滤器, 可接受误报比例
    info-hash-filter-fpp: 0.01

    # 连接peer任务TCP线程数
    tcp-client-thread-num: 8
    # 连接peer任务TCP连接超时时间(ms)
    tcp-connect-timeout-ms: 3000

    # 路由表 非自己的节点id 的一侧分支, 最大可存储的层数. <=160
    routing-table-prefix-len: 10
    # 路由表分段锁 数量
    routing-table-lock-num: 10

  main:
    # 是否开启主任务
    start: true
    ports:
      - 44444
      - 44445
      - 44446
      - 44447
      - 44448
      - 44449
      - 44450
      - 44451
      - 44452
      - 44453
      - 44454
    ip: 106.14.146.117
    init-addresses:
      - 213.136.79.7:6892
      - 173.212.205.4:6876
      - 213.136.79.7:6976
      - 5.79.71.112:51416
      - 213.136.79.238:51504
      - 173.212.205.4:6879
      - 5.189.187.90:6961
      - 85.17.21.107:6881
      - 98.251.201.168:4620
      - 176.221.7.197:6881
      - 179.100.61.253:3111
      - 89.128.212.243:80
      - 101.177.111.96:2101
      - 46.174.123.54:59528
      - 73.183.227.53:6889
      - 89.158.99.95:42060
      - 78.131.103.118:6881
      - 86.166.54.181:6881
      - 68.33.103.62:39939
      - 36.232.112.51:8576
      - 69.9.68.167:10099
      - 113.75.10.73:45620
      - 85.173.163.72:6881
      - 109.61.242.74:11609
      - 216.229.76.101:6881
      - 109.87.189.79:45320
      - 109.87.238.34:11656
      - 93.81.205.100:38682
      - 176.118.55.20:53532
      - 84.236.28.57:6881
      - 178.164.128.95:6881
      - 37.220.35.79:6881
      - 37.59.58.55:6881
      - 188.165.211.227:6881
      - 94.23.249.8:6881
      # 以下是比较有名的节点.其中utorrent是比较好的.剩余两个有点垃圾
      - router.utorrent.com:6881
      - router.bittorrent.com:6881
      - router.bitcomet.com:6881
      - dht.transmissionbt.com:6881
      # 以下是返回我有效的get_peers请求的节点
      - 189.6.18.97:19627
      - 185.106.123.2:28013
      - 5.79.77.167:6881
      - 185.45.195.187:28161
      - 173.193.90.75:15005
      - 178.32.217.107:1026
      - 185.148.3.126:15359
      - 223.190.104.156:16771
      - 91.226.172.12:6881
      - 188.163.9.89:36812
      # 给我announce_peer请求的节点
      - 94.23.5.218:6881
      - 182.190.3.68:6881
      - 163.172.39.232:6881
      - 154.45.216.200:1038
      - 154.45.216.207:1058
      - 154.45.216.212:1068
      - 154.45.216.227:1313
      - 154.45.216.202:1073
      - 154.45.216.238:1273
      - 154.45.216.250:1108
      - 154.45.216.231:1093
      - 46.101.170.140:4445
      - 176.215.13.130:4445
      - 176.100.75.67:15302


